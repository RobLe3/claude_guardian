# =============================================================================
# Project: Claude Guardian - Production Deployment
# File: docker-compose.production.yml
# Version: 2.0_integrated
# Date: 2025-08-24
# Author: Claude Guardian Team
#
# Purpose: Production deployment integrating Go MCP service with vector DB
# Scope: MCP Server (Go), Qdrant, PostgreSQL, threat analysis pipeline
# Exposure: MCP endpoint on 127.0.0.1:8083 only, internal services isolated
# Endpoints: MCP WebSocket at ws://127.0.0.1:8083, health at http://127.0.0.1:8083/health
# Notes: Uses .env file for secrets, persistent volumes, production-ready config
# Performance: Sub-100ms policy decisions, high-throughput vector search
# =============================================================================

services:
  # Vector database for threat pattern storage and semantic search
  qdrant:
    image: qdrant/qdrant:latest
    container_name: claude-guardian-qdrant
    restart: unless-stopped
    environment:
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__STORAGE__OPTIMIZERS__DEFAULT_SEGMENT_NUMBER: 2
      QDRANT__SERVICE__MAX_REQUEST_SIZE_MB: 32
      QDRANT__STORAGE__PERFORMANCE__MAX_SEARCH_THREADS: 4
    ports:
      - "127.0.0.1:6333:6333"     # HTTP API for vector operations
      - "127.0.0.1:6334:6334"     # gRPC for high-performance queries
    volumes:
      - qdrant_data:/qdrant/storage
      - ./init/qdrant:/qdrant/init:ro
    healthcheck:
      test: ["CMD-SHELL", "timeout 3 bash -c '</dev/tcp/localhost/6333' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 30s

  # PostgreSQL for audit logs, policies, and persistent data
  postgres:
    image: postgres:17-alpine
    container_name: claude-guardian-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-claude_guardian}
      - POSTGRES_USER=${POSTGRES_USER:-cguser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TZ=UTC
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init/sql:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 3s
      retries: 20
      start_period: 10s

  # Data initialization service for bootstrapping collections and schemas
  init-service:
    build:
      context: .
      dockerfile: cg.dockerfile
    container_name: claude-guardian-init
    restart: "no"
    environment:
      - PGHOST=postgres
      - PGPORT=5432
      - PGUSER=${POSTGRES_USER:-cguser}
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - PGDATABASE=${POSTGRES_DB:-claude_guardian}
      - QDRANT_URL=http://qdrant:6333
      - CG_INIT=auto
      - MCP_CMD=""
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    volumes:
      - ./init:/app/init:ro

  # Claude Guardian MCP Server - Main service endpoint
  claude-guardian-mcp:
    build:
      context: ../../
      dockerfile: deployments/production/claude-guardian-mcp.dockerfile
    container_name: claude-guardian-mcp
    restart: unless-stopped
    environment:
      # MCP Configuration
      - MCP_PORT=8083
      - MCP_HOST=0.0.0.0
      - MCP_SERVER_NAME=claude-guardian
      - MCP_SERVER_VERSION=2.0.0
      
      # Database Connections
      - QDRANT_URL=http://qdrant:6333
      - DATABASE_URL=postgresql://${POSTGRES_USER:-cguser}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-claude_guardian}
      
      # Security Configuration
      - JWT_SECRET=${JWT_SECRET}
      - SECURITY_LEVEL=${SECURITY_LEVEL:-moderate}
      - RBAC_ENABLED=true
      - AUDIT_ENABLED=true
      
      # Threat Analysis Configuration
      - THREAT_DETECTION_THRESHOLD=0.75
      - ML_MODEL_PATH=/app/models
      - VECTOR_SEARCH_LIMIT=10
      
      # Performance Tuning
      - GO_MAX_PROCS=4
      - GOMAXPROCS=4
      - TZ=UTC
      
      # Feature Flags
      - ENABLE_BEHAVIORAL_ANALYSIS=true
      - ENABLE_PREDICTIVE_ANALYTICS=true
      - ENABLE_REAL_TIME_MONITORING=true
      
    ports:
      - "127.0.0.1:8083:8083"   # MCP endpoint - local access only
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      init-service:
        condition: service_completed_successfully
    volumes:
      - mcp_logs:/app/logs
      - threat_models:/app/models:ro
    healthcheck:
      test: ["CMD", "wget", "-qO", "-", "http://localhost:8083/health"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 30s
    ulimits:
      nofile: 65536
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '1.0'

  # Optional: Monitoring and metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: claude-guardian-metrics
    restart: unless-stopped
    profiles: ["monitoring"]
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    expose:
      - "9090"
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - claude-guardian-mcp

volumes:
  # Persistent data volumes
  qdrant_data:
    driver: local
    driver_opts:
      type: none
      device: ${QDRANT_DATA_PATH:-./data/qdrant}
      o: bind
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: ${POSTGRES_DATA_PATH:-./data/postgres}
      o: bind
  mcp_logs:
    driver: local
  threat_models:
    driver: local
  prometheus_data:
    driver: local

networks:
  default:
    name: claude-guardian-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Health check and monitoring endpoints
x-common-healthcheck: &common-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s