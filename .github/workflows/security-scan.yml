name: Security Scan

on:
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Monday at 6 AM UTC
  push:
    branches: [ main ]
    paths:
      - 'scripts/**'
      - 'requirements*.txt'
      - 'deployments/**'
  workflow_dispatch:

jobs:
  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit

      - name: Install project dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Run Safety check
        run: |
          echo "üîç Running Safety dependency scan..."
          safety check --json --output safety-report.json || true
          if [ -f safety-report.json ]; then
            echo "üìÑ Safety scan completed"
            # Show summary without failing the build
            safety check --short-report || echo "‚ö†Ô∏è Vulnerabilities found - check report"
          fi
        continue-on-error: true

      - name: Run pip-audit
        run: |
          echo "üîç Running pip-audit scan..."
          pip-audit --format=json --output=pip-audit-report.json || true
          if [ -f pip-audit-report.json ]; then
            echo "üìÑ pip-audit scan completed"
            # Show summary without failing the build
            pip-audit || echo "‚ö†Ô∏è Issues found - check report"
          fi
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
            pip-audit-report.json
          retention-days: 30

  secrets-detection:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --only-verified
        continue-on-error: true

  docker-security:
    name: Docker Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          echo "üê≥ Building Docker image for security scan..."
          cd deployments/production
          docker build -f claude-guardian-mcp.dockerfile -t claude-guardian:scan ../../

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'claude-guardian:scan'
          format: 'table'
          exit-code: '0'  # Don't fail the build
        continue-on-error: true

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-security, secrets-detection, docker-security]
    if: always()
    steps:
      - name: Security scan summary
        run: |
          echo "üõ°Ô∏è Claude Guardian Security Scan Summary"
          echo "========================================"
          echo "üìÖ Scan Date: $(date)"
          echo "‚úÖ Dependency Security: ${{ needs.dependency-security.result }}"
          echo "‚úÖ Secrets Detection: ${{ needs.secrets-detection.result }}"
          echo "‚úÖ Docker Security: ${{ needs.docker-security.result }}"
          echo ""
          echo "Note: Claude Guardian IS a security tool - any findings should be"
          echo "evaluated in the context of security research and defensive capabilities."
          echo ""
          echo "üîó For security reports, check the artifacts section above."