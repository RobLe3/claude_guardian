version: '3.8'

services:
  # PostgreSQL Database - Audit logs, scan results, security events
  claude-guardian-postgres:
    image: postgres:17-alpine
    container_name: claude-guardian-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: claude_guardian
      POSTGRES_USER: cguser
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_password}
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cguser -d claude_guardian"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - claude-guardian-network

  # Qdrant Vector Database - Threat patterns, semantic search, LightRAG integration
  claude-guardian-qdrant:
    image: qdrant/qdrant:latest
    container_name: claude-guardian-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"  # HTTP API
      - "6334:6334"  # gRPC API
    volumes:
      - ./data/qdrant:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - claude-guardian-network

  # Redis Cache - Session management, real-time data, caching
  claude-guardian-redis:
    image: redis:7-alpine
    container_name: claude-guardian-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-your_redis_password}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-your_redis_password}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - claude-guardian-network

  # Claude Guardian Application (Optional - for containerized deployment)
  claude-guardian-app:
    build: .
    container_name: claude-guardian-app
    restart: unless-stopped
    ports:
      - "8083:8083"
    environment:
      DATABASE_URL: postgresql://cguser:${POSTGRES_PASSWORD:-your_secure_password}@claude-guardian-postgres:5432/claude_guardian
      QDRANT_URL: http://claude-guardian-qdrant:6333
      REDIS_URL: redis://:${REDIS_PASSWORD:-your_redis_password}@claude-guardian-redis:6379/0
      HOST: 0.0.0.0
      PORT: 8083
      ENVIRONMENT: production
    depends_on:
      - claude-guardian-postgres
      - claude-guardian-qdrant
      - claude-guardian-redis
    networks:
      - claude-guardian-network
    profiles:
      - app  # Use --profile app to start the application container

# All data is now stored in local ./data/ directories for easy access and backup

networks:
  claude-guardian-network:
    driver: bridge

# Usage:
# Start databases only: docker-compose up -d
# Start with app:       docker-compose --profile app up -d
# Stop all:             docker-compose down
# Reset data:           docker-compose down -v