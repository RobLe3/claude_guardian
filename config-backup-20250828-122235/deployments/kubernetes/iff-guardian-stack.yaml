apiVersion: v1
kind: Namespace
metadata:
  name: claude-guardian
  labels:
    name: claude-guardian
    app: claude-guardian
---
# ConfigMap for shared configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: claude-guardian-config
  namespace: claude-guardian
data:
  log_level: "info"
  environment: "production"
  rate_limit_requests: "1000"
  rate_limit_window: "3600"
  cors_allowed_origins: "*"
  jwt_expiry: "3600"
  refresh_token_expiry: "604800"
  threat_detection_threshold: "0.75"
  mcp_enabled: "true"
---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: claude-guardian-secrets
  namespace: claude-guardian
type: Opaque
data:
  # Base64 encoded values - replace with actual values
  jwt_secret: dGhpcy1pcy1hLXZlcnktc2VjdXJlLWp3dC1zZWNyZXQ=
  postgresql_password: cG9zdGdyZXNxbF9wYXNzd29yZA==
  redis_password: cmVkaXNfcGFzc3dvcmQ=
  neo4j_password: bmVvNGpfcGFzc3dvcmQ=
  mongodb_password: bW9uZ29kYl9wYXNzd29yZA==
  influxdb_password: aW5mbHV4ZGJfcGFzc3dvcmQ=
  elasticsearch_password: ZWxhc3RpY3NlYXJjaF9wYXNzd29yZA==
  weaviate_api_key: d2VhdmlhdGVfYXBpX2tleQ==
---
# Gateway Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-service
  namespace: claude-guardian
  labels:
    app: gateway-service
    tier: gateway
spec:
  replicas: 3
  selector:
    matchLabels:
      app: gateway-service
  template:
    metadata:
      labels:
        app: gateway-service
        tier: gateway
    spec:
      containers:
      - name: gateway
        image: claude-guardian/gateway:latest
        ports:
        - containerPort: 8080
        env:
        - name: PORT
          value: "8080"
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: claude-guardian-config
              key: log_level
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: claude-guardian-secrets
              key: jwt_secret
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: claude-guardian-secrets
              key: redis_password
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
---
# Gateway Service
apiVersion: v1
kind: Service
metadata:
  name: gateway-service
  namespace: claude-guardian
spec:
  selector:
    app: gateway-service
  ports:
  - port: 80
    targetPort: 8080
  type: LoadBalancer
---
# Authentication Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: claude-guardian
  labels:
    app: auth-service
    tier: auth
spec:
  replicas: 2
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
        tier: auth
    spec:
      containers:
      - name: auth
        image: claude-guardian/auth-service:latest
        ports:
        - containerPort: 8081
        env:
        - name: PORT
          value: "8081"
        - name: DATABASE_URL
          value: "postgres://iff_guardian:$(POSTGRESQL_PASSWORD)@postgresql:5432/iff_guardian?sslmode=disable"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-master:6379/0"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: claude-guardian-secrets
              key: jwt_secret
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: claude-guardian-secrets
              key: postgresql_password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: claude-guardian-secrets
              key: redis_password
        livenessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8081
          initialDelaySeconds: 10
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
---
# Authentication Service
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: claude-guardian
spec:
  selector:
    app: auth-service
  ports:
  - port: 8081
    targetPort: 8081
---
# Detection Engine Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: detection-engine
  namespace: claude-guardian
  labels:
    app: detection-engine
    tier: detection
spec:
  replicas: 2
  selector:
    matchLabels:
      app: detection-engine
  template:
    metadata:
      labels:
        app: detection-engine
        tier: detection
    spec:
      containers:
      - name: detection
        image: claude-guardian/detection-engine:latest
        ports:
        - containerPort: 8082
        env:
        - name: PORT
          value: "8082"
        - name: WEAVIATE_URL
          value: "http://weaviate:8080"
        - name: WEAVIATE_API_KEY
          valueFrom:
            secretKeyRef:
              name: claude-guardian-secrets
              key: weaviate_api_key
        - name: NEO4J_URL
          value: "bolt://neo4j:7687"
        - name: NEO4J_PASSWORD
          valueFrom:
            secretKeyRef:
              name: claude-guardian-secrets
              key: neo4j_password
        - name: INFLUXDB_URL
          value: "http://influxdb:8086"
        - name: INFLUXDB_TOKEN
          valueFrom:
            secretKeyRef:
              name: claude-guardian-secrets
              key: influxdb_password
        livenessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 60
          periodSeconds: 15
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8082
          initialDelaySeconds: 30
          periodSeconds: 10
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
---
# Detection Engine Service
apiVersion: v1
kind: Service
metadata:
  name: detection-engine
  namespace: claude-guardian
spec:
  selector:
    app: detection-engine
  ports:
  - port: 8082
    targetPort: 8082
---
# GraphQL API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: graphql-api
  namespace: claude-guardian
  labels:
    app: graphql-api
    tier: api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: graphql-api
  template:
    metadata:
      labels:
        app: graphql-api
        tier: api
    spec:
      containers:
      - name: graphql
        image: claude-guardian/graphql-api:latest
        ports:
        - containerPort: 8083
        env:
        - name: PORT
          value: "8083"
        - name: DATABASE_URL
          value: "postgres://iff_guardian:$(POSTGRESQL_PASSWORD)@postgresql:5432/iff_guardian?sslmode=disable"
        - name: AUTH_SERVICE_URL
          value: "http://auth-service:8081"
        - name: DETECTION_SERVICE_URL
          value: "http://detection-engine:8082"
        - name: MCP_SERVICE_URL
          value: "http://mcp-service:8084"
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: claude-guardian-secrets
              key: postgresql_password
        livenessProbe:
          httpGet:
            path: /health
            port: 8083
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8083
          initialDelaySeconds: 15
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
---
# GraphQL API Service
apiVersion: v1
kind: Service
metadata:
  name: graphql-api
  namespace: claude-guardian
spec:
  selector:
    app: graphql-api
  ports:
  - port: 8083
    targetPort: 8083
---
# MCP Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-service
  namespace: claude-guardian
  labels:
    app: mcp-service
    tier: mcp
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mcp-service
  template:
    metadata:
      labels:
        app: mcp-service
        tier: mcp
    spec:
      containers:
      - name: mcp
        image: claude-guardian/mcp-service:latest
        ports:
        - containerPort: 8084
        env:
        - name: PORT
          value: "8084"
        - name: AUTH_SERVICE_URL
          value: "http://auth-service:8081"
        - name: DETECTION_SERVICE_URL
          value: "http://detection-engine:8082"
        - name: THREAT_THRESHOLD
          valueFrom:
            configMapKeyRef:
              name: claude-guardian-config
              key: threat_detection_threshold
        livenessProbe:
          httpGet:
            path: /health
            port: 8084
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8084
          initialDelaySeconds: 15
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
---
# MCP Service
apiVersion: v1
kind: Service
metadata:
  name: mcp-service
  namespace: claude-guardian
spec:
  selector:
    app: mcp-service
  ports:
  - port: 8084
    targetPort: 8084
---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql
  namespace: claude-guardian
  labels:
    app: postgresql
    tier: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
        tier: database
    spec:
      containers:
      - name: postgresql
        image: postgres:16-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "iff_guardian"
        - name: POSTGRES_USER
          value: "iff_guardian"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: claude-guardian-secrets
              key: postgresql_password
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        - name: postgresql-init
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - iff_guardian
            - -d
            - iff_guardian
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - iff_guardian
            - -d
            - iff_guardian
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: postgresql-data
        persistentVolumeClaim:
          claimName: postgresql-pvc
      - name: postgresql-init
        configMap:
          name: postgresql-init-scripts
---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: claude-guardian
spec:
  selector:
    app: postgresql
  ports:
  - port: 5432
    targetPort: 5432
---
# Redis Master Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-master
  namespace: claude-guardian
  labels:
    app: redis-master
    tier: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-master
  template:
    metadata:
      labels:
        app: redis-master
        tier: cache
    spec:
      containers:
      - name: redis
        image: redis:7.2-alpine
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --maxmemory
        - 1gb
        - --maxmemory-policy
        - allkeys-lru
        ports:
        - containerPort: 6379
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: claude-guardian-secrets
              key: redis_password
        volumeMounts:
        - name: redis-data
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-master
  namespace: claude-guardian
spec:
  selector:
    app: redis-master
  ports:
  - port: 6379
    targetPort: 6379
---
# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-pvc
  namespace: claude-guardian
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: claude-guardian
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: fast-ssd
---
# Horizontal Pod Autoscaler for Gateway
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: gateway-hpa
  namespace: claude-guardian
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gateway-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: claude-guardian-network-policy
  namespace: claude-guardian
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: claude-guardian
    - podSelector: {}
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: claude-guardian
    - podSelector: {}
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53