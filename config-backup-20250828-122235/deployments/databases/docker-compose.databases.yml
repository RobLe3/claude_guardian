version: '3.8'

services:
  # Vector Database - Weaviate for semantic search and ML
  weaviate:
    image: semitechnologies/weaviate:1.25.4
    container_name: iff-weaviate
    restart: unless-stopped
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'false'
      AUTHENTICATION_APIKEY_ENABLED: 'true'
      AUTHENTICATION_APIKEY_ALLOWED_KEYS: '${WEAVIATE_API_KEY}'
      AUTHENTICATION_APIKEY_USERS: 'iff-guardian@admin'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'text2vec-openai'
      ENABLE_MODULES: 'text2vec-openai,generative-openai,qna-openai'
      CLUSTER_HOSTNAME: 'node1'
      LOG_LEVEL: 'info'
    ports:
      - '8080:8080'
      - '50051:50051'
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - iff-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Graph Database - Neo4j for relationship modeling
  neo4j:
    image: neo4j:5.15-enterprise
    container_name: iff-neo4j
    restart: unless-stopped
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD}
      NEO4J_ACCEPT_LICENSE_AGREEMENT: 'yes'
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_apoc_export_file_enabled: 'true'
      NEO4J_apoc_import_file_enabled: 'true'
      NEO4J_apoc_import_file_use__neo4j__config: 'true'
      NEO4J_dbms_security_procedures_unrestricted: 'apoc.*,gds.*'
      NEO4J_dbms_security_procedures_allowlist: 'apoc.*,gds.*'
      NEO4J_dbms_memory_heap_initial__size: '512m'
      NEO4J_dbms_memory_heap_max__size: '2G'
      NEO4J_dbms_memory_pagecache_size: '1G'
    ports:
      - '7474:7474'  # HTTP
      - '7687:7687'  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - iff-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Time Series Database - InfluxDB for metrics and monitoring
  influxdb:
    image: influxdb:2.7-alpine
    container_name: iff-influxdb
    restart: unless-stopped
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_USERNAME}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: iff-guardian
      DOCKER_INFLUXDB_INIT_BUCKET: security-metrics
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_ADMIN_TOKEN}
      INFLUXD_LOG_LEVEL: info
    ports:
      - '8086:8086'
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    networks:
      - iff-network
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Document Store - MongoDB for flexible schemas
  mongodb:
    image: mongo:7.0
    container_name: iff-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: iff_guardian
    ports:
      - '27017:27017'
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - iff-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Search Engine - Elasticsearch for log analysis
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: iff-elasticsearch
    restart: unless-stopped
    environment:
      node.name: iff-es-node
      cluster.name: iff-guardian-cluster
      discovery.type: single-node
      bootstrap.memory_lock: 'true'
      xpack.security.enabled: 'true'
      xpack.security.http.ssl.enabled: 'false'
      xpack.security.transport.ssl.enabled: 'false'
      ELASTIC_PASSWORD: ${ELASTICSEARCH_PASSWORD}
      ES_JAVA_OPTS: -Xms1g -Xmx1g
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - '9200:9200'
      - '9300:9300'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - iff-network
    healthcheck:
      test: ["CMD-SHELL", "curl -u elastic:${ELASTICSEARCH_PASSWORD} -s -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis Cluster for caching and session management
  redis-master:
    image: redis:7.2-alpine
    container_name: iff-redis-master
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 1gb --maxmemory-policy allkeys-lru
    ports:
      - '6379:6379'
    volumes:
      - redis_master_data:/data
    networks:
      - iff-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis-replica:
    image: redis:7.2-alpine
    container_name: iff-redis-replica
    restart: unless-stopped
    command: redis-server --replicaof redis-master 6379 --requirepass ${REDIS_PASSWORD} --masterauth ${REDIS_PASSWORD}
    ports:
      - '6380:6379'
    volumes:
      - redis_replica_data:/data
    networks:
      - iff-network
    depends_on:
      - redis-master
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      relries: 3

  # PostgreSQL for relational data
  postgresql:
    image: postgres:16-alpine
    container_name: iff-postgresql
    restart: unless-stopped
    environment:
      POSTGRES_DB: iff_guardian
      POSTGRES_USER: ${POSTGRESQL_USER}
      POSTGRES_PASSWORD: ${POSTGRESQL_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - '5432:5432'
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql:ro
    networks:
      - iff-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRESQL_USER} -d iff_guardian"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  weaviate_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  elasticsearch_data:
    driver: local
  redis_master_data:
    driver: local
  redis_replica_data:
    driver: local
  postgresql_data:
    driver: local

networks:
  iff-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16